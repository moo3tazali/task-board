// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppRole {
  ADMIN // App admin, can manage all boards, users, and permissions
  USER // Regular user, can create boards, lists, tasks, comments and attachments
}

enum BoardRole {
  OWNER // Board owner, has all permissions
  MANAGER // Can manage board members, lists, tasks and labels
  MEMBER // Can view, create, and update tasks, comments and attachments
  VIEWER // Can view the board and its contents
}

enum BoardPermission {
  BOARD_UPDATE
  BOARD_DELETE
  BOARD_ARCHIVE
  BOARD_UNARCHIVE

  BOARD_MEMBERS_ROLE_UPDATE
  BOARD_MEMBERS_CREATE
  BOARD_MEMBERS_UPDATE
  BOARD_MEMBERS_DELETE
  BOARD_MEMBERS_PERMISSION_UPDATE

  LIST_CREATE
  LIST_UPDATE
  LIST_DELETE
  LISTS_ORDER_UPDATE

  TASK_CREATE
  TASK_UPDATE
  TASK_DELETE
  TASKS_ORDER_UPDATE
  TASK_LABEL_CREATE
  TASK_LABEL_UPDATE
  TASK_LABEL_DELETE
  TASK_ASSIGN
  TASK_UNASSIGN
  TASK_DUE_DATE_UPDATE
  TASK_MOVE
  TASK_STATUS_UPDATE
  TASK_COMMENT_CREATE
  TASK_COMMENT_UPDATE
  TASK_COMMENT_DELETE
  TASK_ATTACHMENT_CREATE
  TASK_ATTACHMENT_DELETE
  TASK_ATTACHMENT_VIEW
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_REVIEW
  COMPLETED
  OVERDUE
}

enum ActivityAction {
  CREATED
  UPDATED
  MOVED
  COMPLETED
  DELETED
  ASSIGNED
  UNASSIGNED
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  passwordHash String
  avatarPath   String?
  roles        AppRole[] @default([USER])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boards        BoardMember[]
  assignedTasks TaskAssignee[]
  activities    ActivityLog[]
  notifications Notification[]

  @@map("users")
}

model BoardMember {
  memberId String
  user     User   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  boardId  String
  board    Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  roles       BoardRole[]       @default([MEMBER])
  permissions BoardPermission[] @default([TASK_MOVE, TASK_STATUS_UPDATE, TASK_COMMENT_CREATE, TASK_COMMENT_UPDATE, TASK_COMMENT_DELETE, TASK_ATTACHMENT_CREATE, TASK_ATTACHMENT_DELETE, TASK_ATTACHMENT_VIEW])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([memberId, boardId])
  @@map("board_members")
}

model Board {
  id          String  @id @default(uuid())
  title       String
  description String
  isArchived  Boolean @default(false)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  archivedAt DateTime?

  members    BoardMember[]
  lists      List[]
  activities ActivityLog[]

  @@map("boards")
}

model List {
  id      String @id @default(uuid())
  title   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task[]

  @@unique([boardId, title])
  @@map("lists")
}

model Task {
  id          String     @id @default(uuid())
  listId      String
  title       String
  description String?
  status      TaskStatus @default(NOT_STARTED)
  dueDate     String?

  list List @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignees   TaskAssignee[]
  labels      TaskLabel[]
  comments    Comment[]
  activities  ActivityLog[]
  attachments Attachment[]

  @@unique([listId, title])
  @@index([title])
  @@map("tasks")
}

model TaskAssignee {
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
  @@map("task_assignees")
}

model Label {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks TaskLabel[]

  @@map("labels")
}

model TaskLabel {
  taskId  String
  labelId String
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
  @@map("task_labels")
}

model Comment {
  id      String @id @default(uuid())
  content String
  taskId  String
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// Must have either taskId or boardId
model ActivityLog {
  id      String         @id @default(uuid())
  taskId  String?
  task    Task?          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  boardId String?
  board   Board?         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  userId  String
  user    User           @relation(fields: [userId], references: [id])
  action  ActivityAction

  createdAt DateTime @default(now())

  @@map("activity_logs")
}

model Attachment {
  id       String @id @default(uuid())
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fileName String
  fileType String
  fileSize Int
  fileUrl  String

  createdAt DateTime @default(now())

  @@map("attachments")
}

model Notification {
  id      String  @id @default(uuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type    String
  message String
  isRead  Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}
